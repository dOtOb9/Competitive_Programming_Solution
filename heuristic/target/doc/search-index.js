var searchIndex = JSON.parse('{\
"ahc053":{"doc":"","t":"DLLLLLLLFFLFLLLLLL","n":["Solution","borrow","borrow_mut","clone","clone_into","fmt","from","into","main","output_solution","score","solve","to_json","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"ahc053"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::result"],[21,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,3],4],[-1,-1,[]],[-1,-2,[],[]],[[],2],[1,2],[1,5],[6,1],[1,7],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Solution",0],[15,"tuple"],[3,"Formatter",18],[6,"Result",18],[15,"i64"],[15,"usize"],[3,"String",19],[4,"Result",20],[3,"TypeId",21]],"b":[]},\
"heuristic_common":{"doc":"AHC共通ライブラリ","t":"IIGGGGQIIIIQIIDDALLLLLLLLLLLLKLKLLKKLKKLLLLLLLLLLLLLLLOLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLALLLLLLLLLLLOLLLLLLLLLLLLLKLLKLLLKLLLLLLLLLLLLLLLLLFLKLLLLLKLLLLLLLLLLLLFLLLLLKLLLLLLLLLLLLLLLAALLLLLLAAADDLLLLLLLLMMLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLMIIQIIIQIIDDKLKLLKKLFKKLKLLKLLLLLKKKFKLLLLKFLKDLLLLLLLLLLLLL","n":["CryptoRng","Distribution","FxHashMap","FxHashSet","HashMap","HashSet","Item","IteratorRandom","Itertools","Rng","RngCore","Seed","SeedableRng","SliceRandom","StdRng","ThreadRng","algorithms","all_equal","all_equal_value","all_unique","as_rngcore","as_rngcore","at_most_one","batching","borrow","borrow","borrow_mut","borrow_mut","cartesian_product","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","chunks","circular_tuple_windows","clone","clone","clone_into","clone_into","coalesce","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","contains","counts","counts_by","debug","dedup","dedup_by","dedup_by_with_count","dedup_with_count","default","dropping","dropping_back","duplicates","duplicates_by","eq","exactly_one","fill","fill_bytes","fill_bytes","fill_bytes","filter_map_ok","filter_ok","find_or_first","find_or_last","find_position","flatten_ok","fmt","fmt","fold1","fold_ok","fold_options","fold_results","fold_while","foreach","format","format_with","from","from","from_entropy","from_rng","from_rng","from_seed","from_seed","gen","gen_bool","gen_range","gen_ratio","group_by","interleave","interleave_shortest","intersperse","intersperse_with","into","into","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","io","join","k_smallest","kmerge","kmerge_by","map","map_into","map_ok","map_results","max_set","max_set_by","max_set_by_key","measure_time","merge","merge_by","merge_join_by","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multiunzip","next_tuple","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","pad_using","partial_shuffle","partition_map","partition_result","peeking_take_while","permutations","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","random","read","sample","sample","sample_iter","sample_iter","seed_from_u64","set_from","shuffle","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","step","sum1","take_while_inclusive","take_while_ref","tee","thread_rng","to_owned","to_owned","tree_fold1","try_collect","try_fill","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","try_len","tuple_combinations","tuple_windows","tuples","type_id","type_id","unique","unique_by","update","utils","visualization","vzip","vzip","while_some","with_position","zip_eq","zip_longest","grid","random","timer","Grid","Pos","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col","data","eq","fmt","fmt","from","from","get","get_mut","hash","height","into","into","is_valid","manhattan_distance","neighbors4","neighbors8","new","new","positions","row","set","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","width","CryptoRng","Distribution","Item","IteratorRandom","Rng","RngCore","Seed","SeedableRng","SliceRandom","StdRng","ThreadRng","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_two","choose_weighted","choose_weighted_mut","fill","fill_bytes","from_entropy","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","map","next_u32","next_u64","partial_shuffle","random","sample","sample","sample_iter","sample_iter","seed_from_u64","shuffle","thread_rng","try_fill","try_fill_bytes","Timer","borrow","borrow_mut","elapsed","elapsed_ms","from","into","is_time_up","new","remaining_ms","try_from","try_into","type_id","vzip"],"q":[[0,"heuristic_common"],[210,"heuristic_common::utils"],[213,"heuristic_common::utils::grid"],[256,"heuristic_common::utils::random"],[301,"heuristic_common::utils::timer"],[315,"core::marker"],[316,"core::option"],[317,"core::result"],[318,"itertools::exactly_one_err"],[319,"itertools::adaptors"],[320,"core::ops::function"],[321,"itertools::adaptors"],[322,"rand::seq"],[323,"alloc::vec"],[324,"rand::distributions::weighted_index"],[325,"core::ops::function"],[326,"itertools::tuple_impl"],[327,"core::clone"],[328,"core::iter::traits::iterator"],[329,"core::iter::traits::exact_size"],[330,"itertools::tuple_impl"],[331,"itertools::adaptors::coalesce"],[332,"itertools::combinations_with_replacement"],[333,"core::cmp"],[334,"std::collections::hash::map"],[335,"core::cmp"],[336,"itertools::adaptors::coalesce"],[337,"itertools::duplicates_impl::private"],[338,"itertools::duplicates_impl::private"],[339,"itertools::adaptors"],[340,"core::fmt"],[341,"core::fmt"],[342,"itertools::format"],[343,"itertools::format"],[344,"rand::distributions::uniform"],[345,"rand::distributions::uniform"],[346,"itertools::intersperse"],[347,"itertools::grouping_map"],[348,"alloc::vec::into_iter"],[349,"itertools::kmerge_impl"],[350,"itertools::kmerge_impl"],[351,"itertools::adaptors::map"],[352,"itertools::adaptors::map"],[353,"itertools::merge_join"],[354,"itertools::adaptors::multi_product"],[355,"itertools::multipeek_impl"],[356,"itertools::unziptuple"],[357,"itertools::pad_tail"],[358,"core::default"],[359,"core::iter::traits::collect"],[360,"itertools::peeking_take_while"],[361,"itertools::adaptors"],[362,"core::ops::function"],[363,"std::io::error"],[364,"rand::distributions::distribution"],[365,"itertools::adaptors"],[366,"itertools::adaptors"],[367,"itertools::unique_impl"],[368,"itertools::unique_impl"],[369,"itertools::zip_eq_impl"],[370,"itertools::zip_longest"],[371,"core::fmt"]],"d":["A marker trait used to indicate that an <code>RngCore</code> or …","Types (distributions) that can be used to create a random …","Type alias for a hashmap using the <code>fx</code> hash algorithm.","Type alias for a hashmap using the <code>fx</code> hash algorithm.","共通的に使用される型エイリアス","","The element type.","Extension trait on iterators, providing random sampling …","An <code>Iterator</code> blanket implementation that provides extra …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Extension trait on slices, providing random mutation and …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","アルゴリズム実装","Check whether all elements compare equal.","If there are elements and they are all equal, return a …","Check whether all elements are unique (non equal).","","","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","Return an iterator adaptor that iterates over the …","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","Return an iterator adaptor that uses the passed-in closure …","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Returns <code>true</code> if the given item is present in this iterator.","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","…","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","","If the iterator yields exactly one element, that element …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","","Create a new PRNG using the given seed.","","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return an <em>iterable</em> that can group iterator elements. …","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","入出力関連ユーティリティ","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","Create a distribution of values of ‘S’ by mapping the …","Convert each item of the iterator using the <code>Into</code> trait.","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all maximum elements of an iterator, as determined …","実行時間を測定するマクロ","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Create an iterator that merges items from both this and …","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Advances the iterator and returns the next items grouped …","Return the next random <code>u32</code>.","","","Return the next random <code>u64</code>.","","","Return an iterator adaptor that pads the sequence to a …","Shuffle a slice in place, but exit early.","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of the current …","Iterate over the entire iterator and multiply all the …","Generates a random value using the thread-local random …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Sample a new value, using the given distribution.","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","Shuffle a mutable slice in place.","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Return an iterator adaptor that steps <code>n</code> elements in the …","Iterate over the entire iterator and add all the elements.","Returns an iterator adaptor that consumes elements while …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","Retrieve the lazily-initialized thread-local random number …","","","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","","","Returns the length of the iterator if one exists. …","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that applies a mutating function","ユーティリティ関数","ビジュアライザー支援機能","","","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that combines each element with …","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","グリッド操作ユーティリティ","ランダム関連ユーティリティ","タイマー関連ユーティリティ","2Dグリッド","2D座標を表す構造体","","","","","","","","","列座標（横方向、左から右へ）","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","マンハッタン距離","隣接する4方向の座標を返す","隣接する8方向の座標を返す","新しい座標を作成","","","行座標（縦方向、上から下へ）","","","","","","","","","","","","","A marker trait used to indicate that an <code>RngCore</code> or …","Types (distributions) that can be used to create a random …","The element type.","Extension trait on iterators, providing random sampling …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Extension trait on slices, providing random mutation and …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Create a distribution of values of ‘S’ by mapping the …","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Shuffle a slice in place, but exit early.","Generates a random value using the thread-local random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Sample a new value, using the given distribution.","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Shuffle a mutable slice in place.","Retrieve the lazily-initialized thread-local random number …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","実行時間制限を管理するタイマー","","","開始からの経過時間を取得","経過時間をミリ秒で取得","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","制限時間に達したかチェック","新しいタイマーを作成","残り時間をミリ秒で取得","","","",""],"i":[0,0,0,0,0,0,120,0,0,0,0,121,0,0,0,0,0,122,122,122,25,26,122,122,25,26,25,26,122,120,123,120,123,123,120,120,123,120,120,122,122,25,26,25,26,122,122,122,122,122,122,122,122,122,0,122,122,122,122,26,122,122,122,122,25,122,12,6,25,26,122,122,122,122,122,122,25,26,122,122,122,122,122,122,122,122,25,26,121,121,25,121,25,12,12,12,12,122,122,122,122,122,25,26,122,122,122,122,0,122,122,122,122,94,122,122,122,122,122,122,0,122,122,122,122,122,122,122,122,122,122,122,122,122,6,25,26,6,25,26,122,120,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,6,94,12,94,12,121,122,120,122,122,122,122,122,122,122,122,122,122,122,122,0,25,26,122,122,12,6,25,26,25,26,25,26,122,122,122,122,25,26,122,122,122,0,0,25,26,122,122,122,122,0,0,0,0,0,113,114,113,114,113,114,113,114,113,114,113,113,114,113,114,114,114,113,114,113,114,114,113,113,113,113,114,114,113,114,113,114,113,114,113,114,113,114,113,114,114,0,0,120,0,0,0,121,0,0,0,0,120,123,120,123,123,120,120,123,0,120,120,12,6,121,121,121,12,12,12,12,94,6,6,120,0,94,12,94,12,121,120,0,12,6,0,118,118,118,118,118,118,118,118,118,118,118,118,118],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,2],[-1,[[5,[[4,[3]]]]],2],[-1,1,2],[-1,6,[]],[-1,6,[]],[-1,[[5,[4,[7,[-1]]]]],2],[[-1,-2],[[8,[-1,-2]]],2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[10,[-1]]],2,11],[[-1,-2],4,[],[12,2]],[[-1,-2],4,[],[12,2]],[[-1,-2,13],[[14,[-1]]],[],[12,2]],[[-1,-2,13],15,[],[12,2]],[[-1,-2,16],13,[],[12,2]],[[-1,-2,13,-3],[[5,[[14,[-1]],17]]],[],[12,2],18],[[-1,-2],4,[],[12,2]],[[-1,-2],4,[],[12,2]],[[-1,-2,-3],[[5,[17]]],[],[12,2],18],[[-1,-2,-3],[[5,[17]]],[],[12,2],18],[[-1,13],[[19,[-1]]],2],[-1,[[20,[-1,-2]]],[2,21,22,23],[24,21]],[25,25],[26,26],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],[[28,[-1,-2,27]]],2,9],[-1,[[4,[-2]]],[2,22],29],[-1,15,2],[[-1,13],[[30,[-1]]],2],[[-1,13],[[31,[-1]]],2],[-1,[],2],[[-1,-2],1,2,32],[-1,[[33,[13]]],2],[[-1,-2],[[33,[-3,13]]],2,9,[34,35]],0,[-1,[[28,[-1,[37,[36]],27]]],2],[[-1,-2],[[28,[-1,[37,[-2]],27]]],2,9],[[-1,-2],[[28,[-1,[38,[-2]],39]]],2,9],[-1,[[28,[-1,[38,[36]],39]]],2],[[],26],[[-1,13],-1,2],[[-1,13],-1,[2,40]],[-1,[[42,[-1,41]]],2],[[-1,-2],[[42,[-1,-3,[43,[-2]]]]],2,9,[34,35]],[[25,25],1],[-1,[[5,[[7,[-1]]]]],2],[[-1,-2],3,[],[44,2]],[[-1,[16,[45]]],3,[]],[[25,[16,[45]]],3],[[26,[16,[45]]],3],[[-1,-2],[[46,[-1,-2]]],[22,2],9],[[-1,-2],[[47,[-1,-2]]],[22,2],9],[[-1,-2],4,2,9],[[-1,-2],4,2,9],[[-1,-2],[[4,[[3,[13]]]]],[],9],[-1,[[48,[-1,-2,-3]]],[22,2],11,[]],[[25,49],[[5,[3,50]]]],[[26,49],[[5,[3,50]]]],[[-1,-2],4,2,9],[[-1,-2,-3],[[5,[-2,-4]]],22,[],9,[]],[[-1,-2,-3],[[4,[-2]]],22,[],9],[[-1,-2,-3],[[5,[-2,-4]]],22,[],9,[]],[[-1,-2,-3],[[51,[-2]]],2,[],9],[[-1,-2],3,2,9],[[-1,52],[[53,[-1]]],2],[[-1,52,-2],[[54,[-1,-2]]],2,9],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,[[5,[-2,55]]],6,[]],[-1,[[5,[25,55]]],6],[[],-1,[]],[[],25],[-1,-2,[],[]],[[-1,56],1,[]],[[-1,-3],-2,[],57,[[58,[-2]]]],[[-1,59,59],1,[]],[[-1,-2],[[60,[-3,-1,-2]]],2,9,32],[[-1,-2],[[61,[-1]]],2,11],[[-1,-2],[[62,[-1]]],2,11],[-1,[[64,[-1,63]]],2],[[-1,-2],[[64,[-1,-2]]],2,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[33,[-2,[15,[-3]]]]],[22,2],[35,34],[]],[[-1,-2],[[33,[-3,[15,[-4]]]]],[22,2],18,[35,34],[]],[-1,[[65,[-1]]],[22,2]],[[-1,-2],[[65,[[66,[-1,-2]]]]],[22,2],9],0,[[-1,52],67,[]],[[-1,13],68,2],[-1,[[70,[69]]],2],[[-1,-2],[[70,[-2]]],2,9],[[-1,-2],[[71,[-1,-2,-3,-4]]],2,18,[],[]],[-1,[[73,[-1,[72,[-2]]]]],2,[]],[[-1,-2],[[73,[-1,[74,[-2]]]]],[22,2],9],[[-1,-2],[[73,[-1,[74,[-2]]]]],[22,2],9],[-1,15,2],[[-1,-2],15,2,9],[[-1,-2],15,2,9],0,[[-1,-2],[[76,[-1,75]]],2,11],[[-1,-2,-3],[[76,[-1,-3]]],2,11,9],[[-1,-2,-3],[[76,[-1,[77,[-3]]]]],2,11,9],[-1,15,2],[[-1,-2],15,2,9],[[-1,-2],15,2,9],[-1,78,2],[[-1,-2],78,2,9],[[-1,-2],78,2,9],[-1,79,2],[-1,[[80,[-1]]],2],[-2,-1,[],[2,[81,[-1]]]],[-1,[[4,[-2]]],[2,22],29],[-1,59,[]],[25,59],[26,59],[-1,82,[]],[25,82],[26,82],[[-1,13,-2],[[83,[-1,-2]]],2,9],[[-1,-2,13],[[3,[16,16]]],[],[12,2]],[[-1,-2],[[3,[-4,-6]]],2,9,[],[84,[85,[-3]]],[],[84,[85,[-5]]]],[-1,[[3,[-3,-5]]],[22,2],[],[84,[85,[-2]]],[],[84,[85,[-4]]]],[[-1,-2],[[86,[-1,-2]]],[2,87],9],[[-1,13],[[88,[-1]]],2],[-1,[[4,[13]]],2],[[-1,-2],[[4,[13]]],2,9],[[-1,-2],[[4,[13]]],2,9],[-1,[[4,[13]]],2],[[-1,-2],[[4,[13]]],2,9],[[-1,-2],[[4,[13]]],2,9],[-1,[[78,[13]]],2],[[-1,-2],[[78,[13]]],2,9],[[-1,-2],[[78,[13]]],2,9],[[-1,-2],[[89,[-1,-2]]],2,9],[-1,[[90,[-1]]],2],[[-1,-2],[[5,[-3,-4]]],[22,2],91,[],[]],[-1,[[4,[-2]]],2,92],[[],-1,[]],[[6,[16,[45]]],[[5,[13,93]]]],[[-1,-2],-3,[],[12,2],[]],[[-1,-3],-2,[],[],[[94,[-2]]]],[[-1,-2],[[95,[-1,-2,-3]]],2,12,[]],[[-1,-3],[[95,[-3,-1,-2]]],2,[],[[94,[-2]]]],[82,-1,[]],[[-1,-2],13,22,11],[[-1,-2],3,[],[12,2]],[-1,68,2],[[-1,-2],68,2,9],[[-1,-2],68,2,9],[[-1,-2],68,2,9],[-1,68,2],[[-1,-2],68,2,9],[[-1,-2],68,2,9],[[-1,13],[[96,[-1]]],2],[-1,[[4,[-2]]],2,97],[[-1,-2],[[98,[-1,-2]]],2,9],[[-1,-2],[[99,[-1,-2]]],21,9],[-1,[[3,[[100,[-1]],[100,[-1]]]]],2],[[],26],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],4,2,9],[-1,[[5,[-2,-3]]],[2,22],[],[]],[[-1,-2],[[5,[3,55]]],[],[44,2]],[[-1,[16,[45]]],[[5,[3,55]]],[]],[[25,[16,[45]]],[[5,[3,55]]]],[[26,[16,[45]]],[[5,[3,55]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[13,[3,[13,[4,[13]]]]]]],[]],[-1,[[101,[-1,-2]]],[2,21],[[102,[-1]]]],[-1,[[103,[-1,-2]]],[2,22],29],[-1,[[104,[-1,-2]]],[2,22],29],[-1,105,[]],[-1,105,[]],[-1,[[106,[-1]]],2],[[-1,-2],[[107,[-1,-3,-2]]],2,9,[34,35]],[[-1,-2],[[108,[-1,-2]]],2,9],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[109,[-1]]],[2,22]],[-1,[[110,[-1]]],2],[[-1,-2],[[111,[-1]]],2,11],[[-1,-2],[[112,[-1]]],2,11],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[[[114,[-1]]],[[114,[-1]]],21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[113,113],1],[[113,49],115],[[[114,[-1]],49],115,116],[-1,-1,[]],[-1,-1,[]],[[[114,[-1]],113],[[4,[-1]]],[]],[[[114,[-1]],113],[[4,[-1]]],[]],[[113,-1],3,117],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]],113],1,[]],[[113,113],13],[[113,13,13],[[15,[113]]]],[[113,13,13],[[15,[113]]]],[[13,13],113],[[13,13,-1],[[114,[-1]]],21],[[[114,[-1]]],[[0,[22]]],[]],0,[[[114,[-1]],113,-1],3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,105,[]],[-1,105,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],4,[],[12,2]],[[-1,-2],4,[],[12,2]],[[-1,-2,13],[[14,[-1]]],[],[12,2]],[[-1,-2,13],15,[],[12,2]],[[-1,-2,16],13,[],[12,2]],[[-1,-2,13,-3],[[5,[[14,[-1]],17]]],[],[12,2],18],[[-1,-2],4,[],[12,2]],[[-1,-2],4,[],[12,2]],[[-1,[16,[-2]]],[[4,[[3,[13,13]]]]],12,[]],[[-1,-2,-3],[[5,[17]]],[],[12,2],18],[[-1,-2,-3],[[5,[17]]],[],[12,2],18],[[-1,-2],3,[],[44,2]],[[-1,[16,[45]]],3,[]],[[],-1,[]],[-1,[[5,[-2,55]]],6,[]],[[],-1,[]],[-1,-2,[],[]],[[-1,56],1,[]],[[-1,-3],-2,[],57,[[58,[-2]]]],[[-1,59,59],1,[]],[[-1,-2],[[71,[-1,-2,-3,-4]]],2,18,[],[]],[-1,59,[]],[-1,82,[]],[[-1,-2,13],[[3,[16,16]]],[],[12,2]],[[],-1,[]],[[-1,-2],-3,[],[12,2],[]],[[-1,-3],-2,[],[],[[94,[-2]]]],[[-1,-2],[[95,[-1,-2,-3]]],2,12,[]],[[-1,-3],[[95,[-3,-1,-2]]],2,[],[[94,[-2]]]],[82,-1,[]],[[-1,-2],3,[],[12,2]],[[],26],[[-1,-2],[[5,[3,55]]],[],[44,2]],[[-1,[16,[45]]],[[5,[3,55]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[118,119],[118,82],[-1,-1,[]],[-1,-2,[],[]],[118,1],[82,118],[118,82],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,105,[]],[-1,-2,[],[]]],"c":[78,81,83,116,175],"p":[[15,"bool"],[8,"Sized",315],[15,"tuple"],[4,"Option",316],[4,"Result",317],[8,"RngCore",0],[3,"ExactlyOneError",318],[3,"Batching",319],[8,"FnMut",320],[3,"Product",319],[8,"IntoIterator",321],[8,"Rng",0],[15,"usize"],[3,"SliceChooseIter",322],[3,"Vec",323],[15,"slice"],[4,"WeightedError",324],[8,"Fn",320],[3,"IntoChunks",325],[3,"CircularTupleWindows",326],[8,"Clone",327],[8,"Iterator",328],[8,"ExactSizeIterator",329],[8,"TupleCollect",326],[3,"StdRng",0],[3,"ThreadRng",0],[3,"NoCount",330],[3,"CoalesceBy",330],[8,"HomogeneousTuple",326],[3,"Combinations",331],[3,"CombinationsWithReplacement",332],[8,"PartialEq",333],[3,"HashMap",334],[8,"Eq",333],[8,"Hash",335],[3,"DedupEq",330],[3,"DedupPred2CoalescePred",330],[3,"DedupPredWithCount2CoalescePred",330],[3,"WithCount",330],[8,"DoubleEndedIterator",336],[3,"ById",337],[3,"DuplicatesBy",337],[3,"ByFn",337],[8,"Fill",338],[15,"u8"],[3,"FilterMapOk",319],[3,"FilterOk",319],[3,"FlattenOk",339],[3,"Formatter",340],[3,"Error",340],[4,"FoldWhile",341],[15,"str"],[3,"Format",342],[3,"FormatWith",342],[3,"Error",343],[15,"f64"],[8,"SampleUniform",344],[8,"SampleRange",344],[15,"u32"],[3,"GroupBy",325],[3,"Interleave",319],[3,"InterleaveShortest",319],[3,"IntersperseElementSimple",345],[3,"IntersperseWith",345],[3,"GroupingMap",346],[3,"MapForGrouping",346],[3,"String",347],[3,"IntoIter",348],[3,"KMergeByLt",349],[3,"KMergeBy",349],[3,"DistMap",350],[3,"MapSpecialCaseFnInto",351],[3,"MapSpecialCase",351],[3,"MapSpecialCaseFnOk",351],[3,"MergeLte",352],[3,"MergeBy",352],[3,"MergeFuncLR",352],[4,"MinMaxResult",353],[3,"MultiProduct",354],[3,"MultiPeek",355],[8,"MultiUnzip",356],[15,"u64"],[3,"PadUsing",357],[8,"Default",358],[8,"Extend",321],[3,"PeekingTakeWhile",359],[8,"PeekingNext",359],[3,"Permutations",360],[3,"Positions",319],[3,"Powerset",361],[8,"FnOnce",320],[8,"Product",362],[3,"Error",363],[8,"Distribution",0],[3,"DistIter",350],[3,"Step",319],[8,"Sum",362],[3,"TakeWhileInclusive",364],[3,"TakeWhileRef",319],[3,"Tee",365],[3,"TupleCombinations",319],[8,"HasCombination",319],[3,"TupleWindows",326],[3,"Tuples",326],[3,"TypeId",366],[3,"Unique",367],[3,"UniqueBy",367],[3,"Update",319],[3,"WhileSome",319],[3,"WithPosition",368],[3,"ZipEq",369],[3,"ZipLongest",370],[3,"Pos",213],[3,"Grid",213],[6,"Result",340],[8,"Debug",340],[8,"Hasher",335],[3,"Timer",301],[3,"Duration",371],[8,"SliceRandom",0],[8,"SeedableRng",0],[8,"Itertools",0],[8,"IteratorRandom",0]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
